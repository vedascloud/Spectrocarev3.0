#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('spectrocare-version-3:server');
var cluster = require('cluster'),
    os = require('os');

if(process.env.NODE_ENV === 'test'){
    console.log('testing environment');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8096');
app.set('port', port);

console.log('Server is running on Port : ',port);
/**
 * Create HTTP server.
 */

var server = require('../app').server;

/**
 * Listen on provided port, on all network interfaces.
 */

var httpserver = server.listen(port,function(){
    var port = httpserver.address().port;
});
server.on('error', onError);
server.on('listening', onListening);
    /**
     * Listen on provided port, on all network interfaces.
     */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

}else{

// If in the master process, create a worker for each CPU.
    if (cluster.isMaster) {
        for (var i = 0; i < os.cpus().length; i += 1) {
            cluster.fork();
        }

        // When process dies, replace it.
        cluster.on('exit', function (worker) {
            cluster.fork();

            console.log('Worker %d died :(', worker.id);
        });

        return;
    }
    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '8096');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = require('../app').server;

    /**
     * Listen on provided port, on all network interfaces.
     */

    var httpserver = server.listen(port,function(){
        var port = httpserver.address().port;
    });
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Listen on provided port, on all network interfaces.
     */


    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
        console.log('Worker %d is listening on port %d', cluster.worker.id, port);
    }

}

module.exports = httpserver;

/*
#!/usr/bin/env node

/!**
 * Module dependencies.
 *!/

var app = require('../app');
var debug = require('debug')('spectrocare-version-3:server');
var http = require('http');

/!**
 * Get port from environment and store in Express.
 *!/

var port = normalizePort(process.env.PORT || '8096');
app.set('port', port);

console.log('Server is running on Port : ',port);
/!**
 * Create HTTP server.
 *!/

var server = http.createServer(app);

/!**
 * Listen on provided port, on all network interfaces.
 *!/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/!**
 * Normalize a port into a number, string, or false.
 *!/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/!**
 * Event listener for HTTP server "error" event.
 *!/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/!**
 * Event listener for HTTP server "listening" event.
 *!/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
*/
